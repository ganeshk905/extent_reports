<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="4" total="8" passed="4">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="182" started-at="2015-11-16T21:15:55Z" finished-at="2015-11-16T21:15:55Z">
    <groups>
    </groups>
    <test name="Test" duration-ms="182" started-at="2015-11-16T21:15:55Z" finished-at="2015-11-16T21:15:55Z">
      <class name="com.test.sample.Sample2Test">
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:[Sample2Test passed=0 failed=0 skipped=0]]" name="beforeMethod" is-config="true" duration-ms="109" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.sample.Sample2Test.testApp4()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="testApp4()[pri:0, instance:[Sample2Test passed=0 failed=0 skipped=0]]" name="testApp4" duration-ms="6" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <exception class="java.lang.AssertionError">
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 
	at org.testng.AssertJUnit.fail(AssertJUnit.java:59)
	at org.testng.AssertJUnit.assertTrue(AssertJUnit.java:24)
	at org.testng.AssertJUnit.assertTrue(AssertJUnit.java:33)
	at com.test.sample.Sample2Test.testApp4(Sample2Test.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:648)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:834)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1142)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:771)
	at org.testng.TestRunner.run(TestRunner.java:621)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1176)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1101)
	at org.testng.TestNG.run(TestNG.java:1009)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testApp4 -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:[Sample2Test passed=0 failed=0 skipped=0]]" name="afterMethod" is-config="true" duration-ms="18" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.sample.Sample2Test.testApp4()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:[Sample2Test passed=0 failed=0 skipped=0]]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.sample.Sample2Test.testApp5()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:[Sample2Test passed=0 failed=0 skipped=0]]" name="afterMethod" is-config="true" duration-ms="5" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.sample.Sample2Test.testApp5()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="testApp5()[pri:0, instance:[Sample2Test passed=0 failed=0 skipped=0]]" name="testApp5" duration-ms="0" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testApp5 -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:[Sample2Test passed=0 failed=0 skipped=0]]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.sample.Sample2Test.testApp6()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="testApp6()[pri:0, instance:[Sample2Test passed=0 failed=0 skipped=0]]" name="testApp6" duration-ms="0" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <exception class="java.lang.AssertionError">
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 
	at org.testng.AssertJUnit.fail(AssertJUnit.java:59)
	at org.testng.AssertJUnit.assertTrue(AssertJUnit.java:24)
	at org.testng.AssertJUnit.assertTrue(AssertJUnit.java:33)
	at com.test.sample.Sample2Test.testApp6(Sample2Test.java:23)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:648)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:834)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1142)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:771)
	at org.testng.TestRunner.run(TestRunner.java:621)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1176)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1101)
	at org.testng.TestNG.run(TestNG.java:1009)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testApp6 -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:[Sample2Test passed=0 failed=0 skipped=0]]" name="afterMethod" is-config="true" duration-ms="6" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.sample.Sample2Test.testApp6()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="testApp7()[pri:0, instance:[Sample2Test passed=0 failed=0 skipped=0]]" name="testApp7" duration-ms="0" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testApp7 -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:[Sample2Test passed=0 failed=0 skipped=0]]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.sample.Sample2Test.testApp7()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:[Sample2Test passed=0 failed=0 skipped=0]]" name="afterMethod" is-config="true" duration-ms="3" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.sample.Sample2Test.testApp7()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterSuite()[pri:0, instance:[Sample2Test passed=0 failed=0 skipped=0]]" name="afterSuite" is-config="true" duration-ms="29" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- com.test.sample.Sample2Test -->
      <class name="com.test.sample.SampleTest">
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:[SampleTest passed=0 failed=0 skipped=0]]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.sample.SampleTest.testApp()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="testApp()[pri:0, instance:[SampleTest passed=0 failed=0 skipped=0]]" name="testApp" duration-ms="0" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at com.test.sample.SampleTest.testApp(SampleTest.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:648)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:834)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1142)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:771)
	at org.testng.TestRunner.run(TestRunner.java:621)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1176)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1101)
	at org.testng.TestNG.run(TestNG.java:1009)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testApp -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:[SampleTest passed=0 failed=0 skipped=0]]" name="afterMethod" is-config="true" duration-ms="4" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.sample.SampleTest.testApp()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:[SampleTest passed=0 failed=0 skipped=0]]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.sample.SampleTest.testApp1()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="testApp1()[pri:0, instance:[SampleTest passed=0 failed=0 skipped=0]]" name="testApp1" duration-ms="0" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testApp1 -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:[SampleTest passed=0 failed=0 skipped=0]]" name="afterMethod" is-config="true" duration-ms="2" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.sample.SampleTest.testApp1()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="FAIL" signature="testApp2()[pri:0, instance:[SampleTest passed=0 failed=0 skipped=0]]" name="testApp2" duration-ms="0" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <exception class="java.lang.AssertionError">
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 
	at org.testng.AssertJUnit.fail(AssertJUnit.java:59)
	at org.testng.AssertJUnit.assertTrue(AssertJUnit.java:24)
	at org.testng.AssertJUnit.assertTrue(AssertJUnit.java:33)
	at com.test.sample.SampleTest.testApp2(SampleTest.java:24)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:648)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:834)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1142)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:771)
	at org.testng.TestRunner.run(TestRunner.java:621)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1176)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1101)
	at org.testng.TestNG.run(TestNG.java:1009)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testApp2 -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:[SampleTest passed=0 failed=0 skipped=0]]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.sample.SampleTest.testApp2()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:[SampleTest passed=0 failed=0 skipped=0]]" name="afterMethod" is-config="true" duration-ms="2" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.sample.SampleTest.testApp2()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="testApp3()[pri:0, instance:[SampleTest passed=0 failed=0 skipped=0]]" name="testApp3" duration-ms="0" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testApp3 -->
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:[SampleTest passed=0 failed=0 skipped=0]]" name="afterMethod" is-config="true" duration-ms="2" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.sample.SampleTest.testApp3()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:[SampleTest passed=0 failed=0 skipped=0]]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2015-11-17T02:45:55Z" finished-at="2015-11-17T02:45:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.sample.SampleTest.testApp3()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
      </class> <!-- com.test.sample.SampleTest -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
